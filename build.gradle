//file:noinspection GroovyAssignabilityCheck

import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id("java")
    id("cc.woverflow.loom")
    id("org.jetbrains.kotlin.jvm")
    id("com.github.johnrengelman.shadow")
    id("dev.architectury.architectury-pack200")
    id("com.replaymod.preprocess")
    id("maven-publish")
    id("net.kyori.blossom")
}

blossom {
    def className = "src/main/kotlin/dev/isxander/behindyou/BehindYou.kt"
    replaceToken("@VER@", mod_version, className)
    replaceToken("@NAME@", mod_name, className)
    replaceToken("@ID@", mod_id, className)
}

mcVersion = project.ext.mcVersion
def mcVersionStr = "${(int) (mcVersion / 10000)}.${(int) (mcVersion / 100) % 100}" + (mcVersion % 100 == 0 ? '' : ".${mcVersion % 100}")

preprocess {
    vars.put("MC", mcVersion)
    vars.put("MODERN", mcVersion >= 11600 ? 1 : 0)
    vars.put("FABRIC", mcPlatform == "fabric" ? 1 : 0)
    vars.put("MODERNFORGE", mcVersion >= 11600 && mcPlatform == "forge" ? 1 : 0)
}

version = mod_version
group = "dev.isxander"
archivesBaseName = "${mod_name}-${mcVersionStr}-${mcPlatform}"

kotlin.jvmToolchain {
    languageVersion = JavaLanguageVersion.of(mcVersion > 11800 ? 17 : mcVersion >= 11700 ? 16 : 8)
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
    }
}

java {
    withSourcesJar()
}

loom {
    launchConfigs {
        client {
            if (mcVersion < 11600) {
                arg("--tweakClass", "cc.woverflow.onecore.tweaker.OneCoreTweaker")
            }
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    if (mcPlatform == "forge") {
        forge {
            pack200Provider = new Pack200Adapter()
        }
    }
}

repositories {
    maven { url 'https://repo.woverflow.cc/' }
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    minecraft("com.mojang:minecraft:$mcVersionStr")

    if (mcPlatform == "forge") {
        if (mcVersion < 11600) {
            mappings("de.oceanlabs.mcp:$mappingsVersion")
            compileOnly ("gg.essential:essential-${mcVersionStr}-forge:1933") {
                exclude(module: "keventbus")
            }

            runtimeOnly("me.djtheredstoner:DevAuth-forge-legacy:1.0.0")
            include ("cc.woverflow:onecore-tweaker:1.4.1") {
                transitive = false
            }
        } else {
            mappings(loom.officialMojangMappings())
        }
        forge("net.minecraftforge:forge:$forgeVersion")
    } else {
        mappings("net.fabricmc:yarn:$mappingsVersion:v2")
        modImplementation("net.fabricmc:fabric-loader:$loaderVersion")
        modImplementation "net.fabricmc.fabric-api:fabric-api:$fabricApiVersion"
        modImplementation("net.fabricmc:fabric-language-kotlin:$fabricLanguageKotlinVersion")
        modImplementation("com.terraformersmc:modmenu:$modMenuVersion")
    }
    def onecore = "cc.woverflow:onecore-${mcVersionStr}-${mcPlatform}:1.4.3"
    if (mcVersion < 11600) {
        compileOnly onecore
    } else {
        modImplementation onecore
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "id", mod_id
    inputs.property "version", mod_version
    inputs.property "name", mod_name
    def java = mcVersion > 11800 ? 17 : mcVersion >= 11700 ? 16 : 8
    def compatLevel = "JAVA_${java}"
    inputs.property "java", java
    inputs.property "java_level", compatLevel
    inputs.property "mcversion", mcVersionStr

    filesMatching("mixins.${mod_id}.json") {
        expand(
                "java_level": compatLevel,
                "id": mod_id
        )
    }
    filesMatching("fabric.mod.json") {
        expand(
                "version": mod_version,
                "java": java,
                "mcversion": mcVersionStr
        )
    }
    filesMatching("mcmod.info") {
        expand(
                "id": mod_id,
                "name": mod_name,
                "version": version,
                "mcversion": mcVersionStr
        )
    }
}

remapJar {
    archiveClassifier = "nodeps"
}

jar {
    manifest.attributes(
            "ModSide": "CLIENT",
            "TweakOrder": "0",
            'TweakClass': 'cc.woverflow.onecore.tweaker.OneCoreTweaker',
            'ForceLoadAsMod': true
    )
}

sourceSets {
    main {
        if (mcVersion < 11600) {
            output.resourcesDir = java.classesDirectory
        }
    }
}